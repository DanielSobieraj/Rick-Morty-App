{"version":3,"sources":["services/serviceWorker.js","components/home/components/searchBox.js","components/home/home.js","common/routes.js","components/catalog/catalog.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","useState","character","setCharacter","name","setName","useEffect","axios","get","then","data","results","Box","style","width","Autocomplete","freeSolo","disableClearable","onInputChange","e","setInputName","options","map","renderInput","params","TextField","label","margin","variant","InputProps","type","Home","className","to","Button","reducer","state","action","ReactDOM","render","StrictMode","path","component","useReducer","dispatch","characters","key","id","src","image","alt","status","onClick","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2048def.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. Home is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React, {useEffect, useState} from \"react\";\nimport {Box, TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport axios from \"axios\";\n\nconst SearchBox = () => {\n    const baseURL = \"https://rickandmortyapi.com/api/character\";\n    const [character, setCharacter] = useState([]);\n    const [name, setName] = useState(\"\");\n\n    useEffect(() => {\n        axios.get(`${baseURL}`, {}).then(({data}) => {\n            setCharacter(data.results);\n        });\n    }, []);\n\n    const characterCheck = () => {\n        if (character.map((character) => character.name) == name) {\n            console.log(character.name);\n        }\n    };\n\n\n    return (\n        <Box style={{width: 300}}>\n            <p>{name}</p>\n            <Autocomplete\n                freeSolo\n                disableClearable\n                onInputChange={(e, setInputName) => setName(setInputName)}\n                options={character.map((character) => character.name)}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Enter a character\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        InputProps={{...params.InputProps, type: \"search\"}}\n                    />\n                )}\n            />\n        </Box>\n    );\n};\n\nexport default SearchBox;\n","import \"./home.css\";\nimport React from \"react\";\nimport {Box, Button} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport {catalog} from \"../../common/routes\";\nimport SearchBox from \"./components/searchBox\";\n\nconst Home = () => {\n    return (\n        <Box className=\"background\">\n            <Box className=\"container\">\n                <Box className=\"card__box\">\n                    <Box className=\"app\">\n                        <SearchBox/>\n                        <Box>\n                            <Link to={catalog}>\n                                <Button>Character catalog</Button>\n                            </Link>\n                        </Box>\n                    </Box>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default Home;\n","export const home = \"/\";\r\nexport const catalog = \"/catalog\";\r\n","import React, {useEffect, useReducer, useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {Box, Button} from \"@material-ui/core\";\nimport {home} from \"../../common/routes\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"nextPage\":\n      return (state = state + 1);\n    case \"prevPage\":\n      if (state === 1) {\n        return (state = 1);\n      } else {\n        return (state = state - 1);\n      }\n    default:\n      return state;\n  }\n}\n\nexport function Catalog() {\n  const baseURL = \"https://rickandmortyapi.com/api/character/?\";\n  const [character, setCharacter] = useState([]);\n  const [state, dispatch] = useReducer(reducer, 1);\n\n  useEffect(() => {\n    axios.get(`${baseURL}page=${state}`, {}).then(({data}) => {\n      setCharacter(data.results);\n    });\n  }, [state]);\n\n  const characters = character.map((character) => (\n      <div className=\"character__card\" key={character.id}>\n        <img\n            className=\"character__image\"\n            src={character.image}\n            alt={character.name}\n        />\n        <p key={character.id}>\n          [{character.id}] {character.name} - <span>{character.status}</span>\n        </p>\n      </div>\n  ));\n\n  return (\n      <Box className=\"background\">\n        <Box className=\"container\">\n          {characters}\n          <Box className=\"footer\">\n            <Link to={home}>\n              <Button>Search character</Button>\n            </Link>\n            <Box className=\"buttons\">\n              <Button onClick={() => dispatch({type: \"prevPage\"})}>\n                Prev Page\n              </Button>\n              <Button onClick={() => dispatch({type: \"nextPage\"})}>\n                Next Page\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport './index.css';\nimport * as serviceWorker from './services/serviceWorker';\n\nimport Home from './components/home/home';\nimport {catalog, home} from './common/routes'\nimport {Catalog} from \"./components/catalog/catalog\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <Switch>\n                <Route\n                    path={catalog}\n                    component={Catalog}\n                    exact\n                />\n                <Route\n                    path={home}\n                    component={Home}\n                    exact\n                />\n            </Switch>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}